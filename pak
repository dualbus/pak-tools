#!/bin/bash

# Copyright (c) 2014, Eduardo Bustamante
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# PAK archiver
#
# Author: Eduardo Bustamante (dualbus)
# Usage: pak file1 file2 ... fileN > archive.pak

pad-with() {
  local i c=$1 n=$2

  for ((i = n; i > 0; i--)); do
    if [[ $c = '' ]]; then
      printf \\0
    else
      printf %c "$c"
    fi
  done
}
emit-raw()  { printf %s "$@"; }
emit-lf()   { printf %s\\n "$@"; }
emit-nul()  { printf %s\\0 "$@"; }
emit-int32-le() {
  local int32=$1 hex=

  ((int32 >> 32)) && {
    printf %s\\n "number too big: ''$int32''" >&2
    return 1
  }

  printf -v hex '\\x%x' \
    "$((  int32         & 0xff))" "$(( (int32 >>  8)  & 0xff))" \
    "$(( (int32 >> 16)  & 0xff))" "$(( (int32 >> 24)  & 0xff))"

  printf "$hex"
}



# Compute file sizes and store in table
declare -A file_sizes=()
count=0 total=0
for arg do
  [[ $arg = "${arg::55}" ]] || {
    printf %s\\n "filename too long: ''$arg''" >&2
    exit 1
  }

  size=$(wc -c < "$arg")
  file_sizes[$arg]=$size
  ((total += size, count++))
done



## Header: 12 bytes
emit-raw 'PACK'                 # file-id
emit-int32-le "$((total + 12))" # file-table-offset
emit-int32-le "$((count * 64))" # file-table-size


## Content: $total bytes
cat "$@"


## File entries: 64 bytes * $count
offset=12
for arg do
  file_name=${arg::55} length=${#file_name}

  emit-nul "$file_name"               # file-name
  pad-with '' "$((55 - length))"      # file-name-padding
  emit-int32-le "$offset"             # file-offset
  emit-int32-le "${file_sizes[$arg]}" # file-size

  ((offset += ${file_sizes[$arg]}))
done
